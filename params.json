{"name":"Opticon","tagline":"Server Metering and Monitoring for OpenStack","body":"Opticon Server Metering for OpenStack\r\n=====================================\r\n\r\nOpticon is the CloudVPS successor to its N2 monitoring service: A way of keeping\r\ntabs on what your servers are doing for purposes of monitoring, performance\r\nanalysis and incident forensics. Opticon is designed to be used in conjunction\r\nwith the OpenStack Compute service, but can be operated independently.\r\n\r\nLike its predecessor, the Opticon server agent uses *push notification* to send\r\nupdates to the central collector, allowing important performance data to keep\r\nflowing even under adversial conditions, where traditional pollers tend to fail.\r\n\r\nComponents\r\n----------\r\n\r\nAn installation of opticon will leave you with the following binaries and\r\npath elements:\r\n\r\n| Component                      | Function                                           |\r\n| ------------------------------ | -------------------------------------------------- |\r\n| /usr/sbin/opticon-agent        | The data probe that should run on monitored hosts. |\r\n| /usr/sbin/opticon-collector    | The server component that gathers metering data.   |\r\n| /usr/sbin/opticon-api          | The API server.                                    |\r\n| /usr/bin/opticon               | The command line client to the API server.         |\r\n| /etc/opticon                   | Directory for configuration.                       |\r\n| /usr/libexec/opticon           | Directory for plugins.                             |\r\n| /var/db/opticon                | Directory for the database.                        |\r\n\r\nConfiguring opticon-collector\r\n-----------------------------\r\n\r\nThere are two levels of configuration at play for the collector daemon. The\r\nfirst level is its configuration file, which sets up some of the basics, and\r\ndefines the default set of meters, and alert levels. The second level of\r\nconfiguration is the tenant database. The latter has to be configured through\r\nthe opticon cli, so we’ll get to that after setting up the API server.\r\n\r\n### The configuration file\r\n\r\nThe collector has a very simple base configuration in\r\n`/etc/opticon/opticon-collector.conf`, only dealing with system resources:\r\n\r\n```\r\nnetwork {\r\n    port: 1047\r\n    address: *\r\n}\r\ndatabase {\r\n    path: \"/var/db/opticon\"\r\n}\r\n```\r\n\r\nAdditionally, system-wide custom meters and watchers can be configured in\r\n`/etc/opticon/opticon-meter.conf`, like this:\r\n\r\n```\r\n# Custom meter and watcher definitions\r\n\"pcpu\" {\r\n    type: frac\r\n    description: \"CPU Usage\"\r\n    unit: \"%\"\r\n    warning { cmp: gt, val: 30.0, weight: 1.0 }\r\n    alert { cmp: gt, val: 50.0, weight: 1.0 }\r\n}\r\n\"hostname\" {\r\n    type: string\r\n    description: \"Hostname\"\r\n}\r\n```\r\n\r\nThe configuration files are in a ’sloppy’ JSON format. You can use strict JSON\r\nformatting, but you can also leave out any colons, commas, or quotes around\r\nstrings that have no whitespace or odd characters.\r\n\r\nConfiguring opticon-api\r\n-----------------------\r\n\r\nThe API server keeps its configuration in `/etc/opticon/opticon-api.conf`. This\r\nis how it typically looks:\r\n\r\n```\r\nnetwork {\r\n    port: 8888\r\n}\r\nauth {\r\n    admin_token: a666ed1e-24dc-4533-acab-1efb2bb55081\r\n    admin_host: 127.0.0.1\r\n    keystone_url: \"https://identity.stack.cloudvps.com/v2.0\"\r\n}\r\ndatabase {\r\n    path: \"/var/db/opticon\"\r\n}\r\n```\r\n\r\nGenerate a random UUID for the `admin_token` setting. Requests with this token\r\ncoming from the IP address specified by `admin_host` will be granted\r\nadministrative privileges.\r\n\r\nThe `keystone_url` should point to an OpenStack Keystone server. Authorization\r\ntokens sent to the Opticon API using the OpenStack `X-Auth-Token` header will be\r\nverified against this service, and any OpenStack tenants the token is said to\r\nhave access to will be open to the local session.\r\n\r\nNote that, in order to keep latency at a minimum, opticon-api will cache valid\r\nand invalid tokens, and their associated tenant lists, for up to an hour.\r\n\r\nThe API server will also reference `/etc/opticon/opticon-meter.conf`, so it can\r\ninform users of the actual defaults active.\r\n\r\nConfiguring the opticon client\r\n------------------------------\r\n\r\nThe client gets its configuration from both `/etc/opticon/opticon-cli.conf` and\r\n`$HOME/.opticonrc` (the latter having precedence, but both files are parsed and\r\nmerged). First let’s configure the global configuration file with the endpoint:\r\n\r\n```\r\nendpoints {\r\n  opticon: \"http://127.0.0.1:8888/\"\r\n}\r\n```\r\n\r\nIn `.opticonrc` you can configure the `admin_token` as it was configured in the\r\napi configuration:\r\n\r\n```\r\ndefaults {\r\n  admin_token: a666ed1e-24dc-4533-acab-1efb2bb55081\r\n}\r\n```\r\n\r\nThis is the `.opticonrc` you should set up for the root account, or another user\r\nwith an administrative role.\r\n\r\nManaging the tenant database\r\n----------------------------\r\n\r\nNow that the collector and API-server are active, and the client knows how to\r\ntalk to them, the admin API can be used to add tenants to the database. Use the\r\nfollowing command to create a new tenant:\r\n\r\n```Apex\r\n$ opticon tenant-create --name \"Acme\"\r\nTenant created:\r\n------------------------------------------------------------------\r\n     Name: Acme\r\n     UUID: dbe7c559-297e-e65b-9eca-fc96037c67e2\r\n  AES Key: nwKT5sfGa+OlYHwa7rZZ7WQaMsAIEWKQii0iuSUPfG0=\r\n------------------------------------------------------------------\r\n```\r\n\r\nThe tool will spit out the UUID for the newly created tenant, as well as the\r\ntenant AES256 key to be used in the configuration of this tenant’s\r\n*opticon-agent* instances.\r\n\r\nIf you want to create a tenant with a predefined UUID, you can use the\r\n`--tenant` command line flag:\r\n\r\n```Apex\r\n$ opticon tenant-create --name \"Acme\" --tenant 0296d893-8187-4f44-a31b-bf3b4c19fc10\r\n```\r\n\r\nThis will be followed by the same information as the first example. Note that\r\ncreating tenants manually in a Keystone-enabled setup is going to be a bit\r\npointless. Users authenticated with a valid keystone token are allowed to create\r\nthe tenant record for tenants they have access to, so the entire set-up should\r\nbe self service.\r\n\r\n### Getting an overview of tenants\r\n\r\nIf accessed through the admin API, the `tenant-list` sub-command will show\r\ninformation about all tenants on the system:\r\n\r\n```Apex\r\n$ opticon tenant-list\r\nUUID                                 Hosts  Name\r\n--------------------------------------------------------------------------------\r\n001b7153-4f4b-4f1c-b281-cc06b134f98f     2  compute-pim\r\n0296d893-8187-4f44-a31b-bf3b4c19fc10     0  Acme\r\n6c0606c4-97e6-37dc-14fc-b7c1c61effef     0  compute-demo\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nThe same command issued to the regular API will restrict this list to tenants\r\naccessible to the user.\r\n\r\n### Deleting a tenant\r\n\r\nTo get rid of a tenant (and reclaim all associated storage), use the\r\n`tenant-delete` sub-command:\r\n\r\n```Apex\r\n$ opticon tenant-delete --tenant 0296d893-8187-4f44-a31b-bf3b4c19fc10\r\n```\r\n\r\nthat should teach them. Users authenticated through Keystone are allowed to\r\nclean up their own tenants, but not those of others, for reasons that should be\r\nobvious.\r\n\r\nConfiguring opticon-agent\r\n-------------------------\r\n\r\nWith a tenantid and access key in hand, you can now go around and install\r\nopticon-agent on servers that you would like to monitor. The agent reads its\r\nconfiguration from `/etc/opticon/opticon-agent.conf`. First let’s take a look at\r\na rather straightforward configuration:\r\n\r\n```\r\ncollector {\r\n    config: manual\r\n    address: 192.168.1.1\r\n    port: 1047\r\n    key: \"nwKT5sfGa+OlYHwa7rZZ7WQaMsAIEWKQii0iuSUPfG0=\"\r\n    tenant: \"001b71534f4b4f1cb281cc06b134f98f\"\r\n    host: \"0d19d114-55c8-4077-9cab-348579c70612\"\r\n}\r\nprobes {\r\n    top {\r\n        type: built-in\r\n        call: probe_top\r\n        interval: 60\r\n    }\r\n    hostname {\r\n        type: built-in\r\n        call: probe_hostname\r\n        interval: 300\r\n    }\r\n    uname {\r\n        type: built-in\r\n        call: probe_uname\r\n        interval: 300\r\n    }\r\n    df {\r\n        type: built-in\r\n        call: probe_df\r\n        interval: 300\r\n    }\r\n    uptime {\r\n        type: built-in\r\n        call: probe_uptime\r\n        interval: 60\r\n    }\r\n}\r\n```\r\n\r\nThe `collector` section tells the agent how to reach the opticon-collector, and\r\nhow to identify itself. If the server runs in an OpenStack cloud, you can change\r\nthe `config` setting from `manual` to `cloud-init`. This will tell the agent to\r\nget the connection information out of the OpenStack metadata service, instead.\r\nIt will try to read the following metadata fields: `opticon_collector_address`,\r\n`opticon_collector_port`, `opticon_tenant_key`, `opticon_tenant_id`, and\r\n`opticon_host_id`.\r\n\r\nIf you are using manual configuration, be sure to use a unique, random, UUID for\r\nthe `host` field. You can use the `uuidgen` tool on most UNIX command lines to\r\nget a fresh one.\r\n\r\nThe `probes` section defines the metering probes that the agent shall run and\r\nthe frequency of updates. The agent sends out metering data over two channels:\r\nThe fast lane, and the slow lane. Data that isn’t subject to rapid change should\r\ntake the slow lane path, that gets sent out every 300 seconds. The `interval`\r\nsetting determines the amount of seconds between individual samples for a probe.\r\nNote that this probing happens independently of packet scheduling, so setting up\r\nintervals other than `60` or `300` is of limited use.\r\n\r\nAccessing opticon as a user\r\n---------------------------\r\n\r\nAfter you used the admin API to create a tenant, you should be able to access\r\nthe rest of the functionality from any machine running an opticon client. To\r\nallow for keystone authentication, add the endpoint to `opticon-cli.conf` like\r\nthis:\r\n\r\n```\r\nendpoints {\r\n  keystone: \"https://identity.stack.cloudvps.com/v2.0\"\r\n  opticon: \"http://192.168.1.1:8888/\"\r\n}\r\n```\r\n\r\nThe local `.opticonrc` shouldn't have an `admin_token`, but it’s possible to add\r\nsome convenience to the workflow by picking a default tenant for commands; most\r\nusers are likely to work with a single tenant and can do fine without typing\r\n`--tenant`, and a huge UUID after each command:\r\n\r\n```\r\ndefaults {\r\n  tenant: 001b7153-4f4b-4f1c-b281-cc06b134f98f\r\n}\r\n```\r\n\r\nWith everything in place, calling opticon for the first time will now prompt you\r\nfor Keystone login credentials:\r\n\r\n```Apex\r\n$ opticon tenant-list\r\n% Login required\r\n\r\n  OpenStack Domain: identity.stack.cloudvps.com\r\n  Username........: pi\r\n  Password........: \r\n\r\nUUID                                 Hosts  Name\r\n--------------------------------------------------------------------------------\r\n001b7153-4f4b-4f1c-b281-cc06b134f98f     2  compute-pim\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nThe next time you issue a request, the client will use a cached version of the\r\nKeystone token it acquired with your username and password. If you’re having\r\nissues with your key, you can remove the cache file manually, it is stored in\r\n`$HOME/.opticon-token-cache`.\r\n\r\nSince this account only has one tenant, for the rest of this documentation, we\r\nwill assume that this tenant-id is specified in `.opticonrc`. In situations\r\nwhere you have to deal with multiple tenants, the `--tenant` flag can added to\r\nany command to indicate a specific tenant.\r\n\r\n### Manipulating tenant metadata\r\n\r\nEvery tenant object in the opticon database has freeform metadata. Some of it is\r\nused internally, like the tenant AES key. Use the `tenant-get-metadata`\r\nsub-command to view a tenant’s metadata in JSON format:\r\n\r\n```\r\n$ opticon tenant-get-metadata\r\n{\r\n    \"metadata\": {\r\n    }\r\n}\r\n```\r\n\r\nYou can add keys to the metadata, or change the value of existing keys, by using\r\nthe obviously named `tenant-set-metadata` sub-command:\r\n\r\n```Apex\r\n$ opticon tenant-set-metadata sleep optional\r\n$ opticon tenant-get-metadata\r\n{\r\n    \"metadata\": {\r\n        \"sleep\": \"optional\"\r\n    }\r\n}\r\n```\r\n\r\n### Navigating hosts\r\n\r\nTo get an overview of the hosts being monitored by the system, use the\r\n`host-list` sub-command:\r\n\r\n```Apex\r\n$ opticon host-list\r\nUUID                                    Size First record      Last record\r\n--------------------------------------------------------------------------------\r\n0d19d114-55c8-4077-9cab-348579c70612    5 MB 2014-09-24 13:57  2014-10-02 20:20\r\n2b331038-aac4-4d8b-a7cd-5271b603bd1e    5 MB 2014-09-24 16:14  2014-10-02 20:20\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nThe times provided throughout opticon are always normalized to UTC. You can also\r\nget a nice overview of the state your hosts using `host-overview`:\r\n\r\n```\r\n$ opticon host-overview\r\njones:opticon pi$ opticon host-overview \r\nName                            Status     Load  Net i/o      CPU\r\n--------------------------------------------------------------------------------\r\njones.local                     ALERT      0.95        6  15.36 % -[##        ]+\r\nJander.local                    OK         1.34        7   4.91 % -[          ]+\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nUse the `host-show` sub-command to get the latest record available for a host.\r\nYou can use a host's uuid, or its hostname (if it is unique) to get at it:\r\n\r\n```Apex\r\n$ opticon host-show --host Jander.local\r\n---( HOST )---------------------------------------------------------------------\r\nUUID..............: 2b331038-aac4-4d8b-a7cd-5271b603bd1e\r\nHostname..........: Jander.local\r\nAddress...........: ::ffff:92.108.228.195\r\nStatus............: OK\r\nProblems..........: \r\nUptime............: 7 days, 11:22:58\r\nOS/Hardware.......: Darwin 13.4.0 (x86_64)\r\nDistribution......: OS X 10.9.5 (13F34)\r\n---( RESOURCES )----------------------------------------------------------------\r\nProcesses.........: 167 (2 running, 2 stuck)\r\nLoad Average......:   1.33 /   1.61 /   1.57\r\nCPU...............:   4.91 %                         -[#                     ]+\r\nAvailable RAM.....: 16375.00 MB\r\nFree RAM..........: 14947.00 MB\r\nNetwork in/out....: 5 Kb/s (3 pps) / 2 Kb/s (3 pps)\r\nDisk i/o..........: 0 rdops / 0 wrops\r\n---( PROCESS LIST )-------------------------------------------------------------\r\nUSER                PID       CPU       MEM NAME \r\npi                  561    9.00 %    0.00 % UA Mixer Engine \r\nroot                  0    7.00 %    0.00 % kernel_task \r\npi                  467    5.79 %    0.00 % Pianoteq 5 \r\npi                  224    5.69 %    0.00 % EuControl \r\n_coreaudiod         419    3.59 %    0.00 % coreaudiod \r\nroot                122    1.69 %    0.00 % SGProtocolServi \r\npi                 1104    0.79 %    0.00 % Console \r\npi                  517    0.49 %    0.00 % MIDIServer \r\nroot                  1    0.09 %    0.00 % launchd \r\n_locationd          102    0.09 %    0.00 % locationd \r\n---( STORAGE )------------------------------------------------------------------\r\nDEVICE                 SIZE FS         USED MOUNTPOINT \r\n/dev/disk0s2      464.84 GB hfs     57.00 % / \r\n/dev/disk1s2      931.19 GB hfs     20.00 % /Volumes/Audio \r\n/dev/disk7       5588.40 GB hfs     49.00 % /Volumes/Oodle Nova \r\n/dev/disk6       5588.40 GB hfs     31.00 % /Volumes/Storage \r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nCustomizing alerts\r\n------------------\r\n\r\nThe opticon-collector processes metering samples every minute, and uses a list\r\nof *watchers* to determine whether there are any problems. A watcher is a\r\nsetting for a specific meter that compares it with a defined value, and uses the\r\noutcome to attribute a level of ‘badness’ to a host.\r\n\r\nThe software ships with a default set of watchers that is hopefully useful for\r\nmost cases. You can look at the current situation by issuing the `watcher-list`\r\nsub-command:\r\n\r\n```Apex\r\n$ opticon watcher-list\r\nFrom     Meter        Trigger   Match                  Value             Weight\r\n--------------------------------------------------------------------------------\r\ndefault  df/pused     warning   gt                     90.00                1.0\r\ndefault  df/pused     alert     gt                     95.00                1.0\r\ndefault  df/pused     critical  gt                     99.00                1.0\r\ndefault  pcpu         warning   gt                     70.00                1.0\r\ndefault  pcpu         alert     gt                     90.00                1.0\r\ndefault  pcpu         critical  gt                     99.00                1.0\r\ndefault  loadavg      warning   gt                     10.00                1.0\r\ndefault  loadavg      alert     gt                     20.00                1.0\r\ndefault  loadavg      critical  gt                     50.00                1.0\r\ndefault  proc/stuck   warning   gt                         6                1.0\r\ndefault  proc/stuck   alert     gt                        10                1.0\r\ndefault  proc/stuck   critical  gt                        20                1.0\r\ndefault  net/in_kbs   warning   gt                     40000                0.5\r\ndefault  net/in_pps   warning   gt                     10000                1.0\r\ndefault  net/in_pps   alert     gt                     50000                1.0\r\ndefault  net/in_pps   critical  gt                    100000                1.0\r\ndefault  net/out_pps  warning   gt                     10000                1.0\r\ndefault  net/out_pps  alert     gt                     50000                1.0\r\ndefault  net/out_pps  critical  gt                    100000                1.0\r\ndefault  mem/free     warning   lt                     65536                0.5\r\ndefault  mem/free     alert     lt                     32768                1.0\r\ndefault  mem/free     critical  lt                      4096                1.0\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nYou can change the settings for a watcher, by using the `watcher-set`\r\nsub-command:\r\n\r\n```Apex\r\n$ opticon watcher-set --meter pcpu --level warning --value 40\r\n$ opticon watcher-list\r\nFrom     Meter        Trigger   Match                  Value             Weight\r\n--------------------------------------------------------------------------------\r\ndefault  df/pused     warning   gt                     90.00                1.0\r\ndefault  df/pused     alert     gt                     95.00                1.0\r\ndefault  df/pused     critical  gt                     99.00                1.0\r\ntenant   pcpu         warning   gt                     40.00                1.0\r\ndefault  pcpu         alert     gt                     50.00                1.0\r\ndefault  pcpu         critical  gt                     99.00                1.0\r\n...\r\n```\r\n\r\nThe `weight` value for a watcher determines how fast it should cause the alert\r\nlevel to rise. If you set it lower, the time it takes for an over-threshold\r\nvalue to get to the various alert stages. To get rid of any customizations,\r\nissue the `watcher-delete` command with the proper `--meter` provided.\r\n\r\nIf you want to view or change watchers only for a specific host, specify the\r\nhost with the `--host` flag.\r\n\r\nCreating custom meters\r\n----------------------\r\n\r\nOpticon allows you to fully customize the meters that are being transmitted\r\nbetween the agent and the collector. Before we start designing our own custom\r\nmeter, first some bits about the data model. By running the client with the\r\n`--json` flag, you can get an idea of the structure:\r\n\r\n```Apex\r\n$ opticon host-show --host 2b331038-aac4-4d8b-a7cd-5271b603bd1e --json\r\n{\r\n    \"agent\": {\r\n        \"ip\": \"fe80::8a53:95ff:fe32:557\"\r\n    },\r\n    \"hostname\": \"Jander.local\",\r\n    \"loadavg\": [\r\n        1.383000,\r\n        1.391000,\r\n        1.422000\r\n    ],\r\n    \"os\": {\r\n        \"kernel\": \"Darwin\",\r\n        \"version\": \"13.3.0\",\r\n        \"arch\": \"x86_64\"\r\n    },\r\n    \"df\": [\r\n        {\r\n            \"device\": \"/dev/disk0s2\",\r\n            \"size\": 475992,\r\n            \"pused\": 57.000000,\r\n            \"mount\": \"/\",\r\n            \"fs\": \"hfs\"\r\n        },\r\n        {\r\n            \"device\": \"/dev/disk1s2\",\r\n            \"size\": 953541,\r\n            \"pused\": 20.000000,\r\n            \"mount\": \"/Volumes/Audio\",\r\n            \"fs\": \"hfs\"\r\n        }\r\n    },\r\n...\r\n```\r\n\r\nThis looks deceptively structured. But opticon data is not free form. The limits\r\nimposed by UDP packet sizes necessitate some engineering compromises. To keep\r\nbandwidth from exploding, the underlying data is actually implemented as a flat\r\nlist of values and arrays, with dictionary/hashes at the JSON level being purely\r\nan illusion limited to two levels. The data above, represented internally, would\r\nlook like this:\r\n\r\n```javascript\r\n{\r\n    \"agent/ip\": \"fe80::8a53:95ff:fe32:557\",\r\n    \"hostname\": \"Jander.local\",\r\n    \"loadavg\": [1.383, 1.391, 1.422],\r\n    \"os/kernel\": \"Darwin\",\r\n    \"os/version\": \"13.3.0\",\r\n    \"os/arch\": \"x86_64\",\r\n    \"df/device\": [\"/dev/disk0s2\", \"/dev/disk1s2\"],\r\n    \"df/size\": [475992, 953541],\r\n    \"df/pused\": [57.000, 20.000],\r\n    \"df/mount\": [\"/\", \"/Volumes/Audio\"],\r\n    \"df/fs\": [\"hfs\", \"hfs\"]\r\n}\r\n```\r\n\r\nThis representation, as noted, allows for a limited set of JSON constructs\r\ninvolving dictionaries:\r\n\r\n```Apex\r\n\"key\": \"string\" # obviously\r\n\r\n\"key\": 18372 # unsigned 63-bit integer\r\n\r\n\"key\": 1.3 # fractional number, range 0.000 - 255.999\r\n\r\n# grouped values\r\n\"key\": {\r\n    \"key\": \"value\",\r\n    \"other\": 42\r\n}\r\n\r\n\"key\": [\"string\", \"string\"] # array of strings\r\n\r\n\"key\": [13, 37, 42] # array of unsigned integers\r\n\r\n\"key\": [1.0, 2.07, 3.14] # array of fractional numbers\r\n\r\n#table\r\n\"key\": [\r\n    {\"key1\": \"valueA\", \"key2\": 42},\r\n    {\"key1\": \"valueB\", \"key2\": 64}\r\n]\r\n```\r\n\r\nA further limitation is length of the keys. The maximum size of a key name is\r\n11. If you’re at a second level, the sum of the length of the key name and its\r\nparent key name cannot be larger than 10 (one is lost for the ‘/‘). There’s also\r\na very limited character set to choose from for keys:\r\n\r\n```Apex\r\na b c d e f g h i j k l m n o p q r s t u v w x y z . - _ / @\r\n```\r\n\r\nIn addition, arrays are limited in size to a maximum of 29 items.\r\n\r\nWriting a custom probe\r\n----------------------\r\n\r\nWith all this fresh knowledge in hand, let’s try to write a real world probe.\r\nFor this example, we will query the battery level of a MacBook and start\r\ntransmitting this as a meter.\r\n\r\nThe battery level can be queried from the command line using the `pmset`\r\nutility. Its output looks like this:\r\n\r\n```Apex\r\n$ pmset -g batt\r\nNow drawing from 'AC Power'\r\n -InternalBattery-0     97%; charged; 0:00 remaining\r\n```\r\n\r\nWe’ll write an ugly script to turn that information into JSON:\r\n\r\n```Apex\r\n$ cat /usr/local/scripts/getpower.sh\r\n#!/bin/sh\r\ncharge=$(pmset -g batt | grep InternalBattery | cut -f2 | cut -f1 -d'%')\r\nsource=$(pmset -g batt | head -1 | cut -f2 -d \"'\" | sed -e \"s/ Power//\")\r\nprintf '{\"power\":{\"level\":%.2f,\"src\":\"%s\"}}\\n' \"$charge\" \"$source\"\r\n\r\n$ /usr/local/scripts/getpower.sh\r\n{\"power\":{\"level\":96.00,\"src\":\"AC\"}}\r\n```\r\n\r\nNow we can add this script to the `probes` section of `opticon-agent.conf`:\r\n\r\n```\r\nprobes {\r\n    power {\r\n        type: exec\r\n        call: /usr/local/scripts/getpower.sh\r\n        interval: 60\r\n    }\r\n    ...\r\n```\r\n\r\nAfter restarting the agent, and waiting for the next minute mark to pass, and\r\ncollector to write out its data, the value should be visible in the `host-show`\r\nJSON output:\r\n\r\n```\r\n    \"mem\": {\r\n        \"total\": 8386560,\r\n        \"free\": 6928384\r\n    },\r\n    \"uptime\": 184495,\r\n    \"power\": {\r\n        \"level\": 96.000000,\r\n        \"src\": \"AC\"\r\n    },\r\n    \"status\": \"WARN\",\r\n```\r\n\r\nEt voila, an extra meter was born.\r\n\r\n### Configuring the meter for the tenant\r\n\r\nIf you want your meter to show up less cryptically, you should add information\r\nthe meter to the tenant’s database using the command line tool:\r\n\r\n```Apex\r\n$ opticon meter-create --meter power/level --type frac --description \"Battery Level\" --unit \"%\"\r\n$ opticon meter-create --meter power/src --type string --description \"Power Source\"\r\n$ opticon meter-list\r\nFrom     Meter        Type      Unit    Description\r\n--------------------------------------------------------------------------------\r\ndefault  agent/ip     string            Remote IP Address\r\ndefault  os/kernel    string            Version\r\ndefault  os/arch      string            CPU Architecture\r\ndefault  df/device    string            Device\r\ndefault  df/size      integer   KB      Size\r\ndefault  df/pused     frac      %       In Use\r\ndefault  uptime       integer   s       Uptime\r\ndefault  top/pid      integer           PID\r\ndefault  top/name     string            Name\r\ndefault  top/pcpu     frac      %       CPU Usage\r\ndefault  top/pmem     frac      %       RAM Usage\r\ndefault  pcpu         frac      %       CPU Usage\r\ndefault  loadavg      frac              Load Average\r\ndefault  proc/total   integer           Total processes\r\ndefault  proc/run     integer           Running processes\r\ndefault  proc/stuck   integer           Stuck processes\r\ndefault  net/in_kbs   integer   Kb/s    Network data in\r\ndefault  net/in_pps   integer   pps     Network packets in\r\ndefault  net/out_kbs  integer   Kb/s    Network data out\r\ndefault  net/out_pps  integer   pps     Network packets out\r\ndefault  io/rdops     integer   iops    Disk I/O (read)\r\ndefault  io/wrops     integer   iops    Disk I/O (write)\r\ndefault  mem/total    integer   KB      Total RAM\r\ndefault  mem/free     integer   KB      Free RAM\r\ndefault  hostname     string            Hostname\r\ntenant   power/level  frac      %       Battery Level\r\ntenant   power/src    string            Power Source\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nNote that the type indicated with `--type` is a hint about how watchers should\r\ninterpret the value. The agent may end up encoding a `frac` value as an\r\n`integer` if there’s no decimal point, this will not stop a watcher set to type\r\n`frac` from correctly noticing it going over or under the limit.\r\n\r\nWith the extra information provided, your meter should now also show up in the\r\n`host-show` non-JSON output:\r\n\r\n```Apex\r\n$ opticon host-show --host 0d19d114-55c8-4077-9cab-348579c70612\r\n---( HOST )---------------------------------------------------------------------\r\nUUID............: 0d19d114-55c8-4077-9cab-348579c70612\r\nHostname........: giskard.local\r\n...\r\n---( OTHER )--------------------------------------------------------------------\r\nBattery Level...: 96.00 %\r\nPower Source....: AC\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nNow that the meter exists in the database, it’s also possible to set up watchers\r\nfor it. Let’s set up some sensible levels:\r\n\r\n```Apex\r\n$ opticon watcher-set --meter power/level --level warning --match lt --value 30\r\n$ opticon watcher-set --meter power/level --level alert --match lt --value 15\r\n$ opticon watcher-list | grep power/level\r\ntenant   power/level  warning   lt                     30.00                1.0\r\ntenant   power/level  alert     lt                     15.00                1.0\r\n```\r\n\r\nTable data\r\n----------\r\n\r\nIf you want to send table-like metering data, like the process list, a little\r\nmore work needs to be done. Let’s walk in a fictional universe, where there is\r\nno probe for the currently logged in users (there is). First we’ll write a\r\nwrapper around the output of the “who” command, which looks like this on Darwin:\r\n\r\n```Apex\r\n$ who\r\npi       console  Oct  4 22:55 \r\npi       ttys000  Oct  5 10:27 \r\npi       ttys001  Oct  5 10:43 \r\npi       ttys002  Oct  5 00:18 \r\npi       ttys003  Oct  5 10:43  (172.16.1.10)\r\n```\r\n\r\nAnd the pox-ridden contraption of a bash script to convert it into JSON:\r\n\r\n```Apex\r\n$ cat /usr/local/scripts/who.sh\r\n#!/bin/sh\r\necho '{\"who\":['\r\nwho | while read name tty month day time remote; do\r\n  if [ ! -z \"$remote\" ]; then\r\n    remote=$(echo \"$remote\" | cut -f2 -d'(' | cut -f1 -d')')\r\n    printf '  {\"user\":\"%s\",\"tty\":\"%s\",\"remote\":\"%s\"}\\n' \"$name\" \"$tty\" \"$remote\"\r\n  fi\r\ndone\r\necho ']}'\r\n$ /usr/local/scripts/who.sh\r\n{\"who\":[\r\n  {\"user\":\"pi\",\"tty\":\"ttys003\",\"remote\":\"172.16.1.10\"}\r\n]}\r\n```\r\n\r\nWe’ll bind it to a probe in `opticon-agent.conf` like before:\r\n\r\n```\r\n    who {\r\n        type: exec\r\n        call: /usr/local/scripts/who.sh\r\n        interval: 60\r\n    }\r\n```\r\n\r\nFinally, meters need to be set up. We’ll set one for each field in the table,\r\nbut also one for the table itself:\r\n\r\n```Apex\r\n$ opticon meter-create --meter who --type table --description \"Remote Users\"\r\n$ opticon meter-create --meter who/user --type string --description \"User\"\r\n$ opticon meter-create --meter who/tty --type string --description \"TTY\"\r\n$ opticon meter-create --meter who/remote --type string --description \"Remote IP\"\r\n```\r\n\r\nWith everything configured and the metering data coming in, the results should\r\nbe visible from `opticon host-show`:\r\n\r\n```Apex\r\n$ opticon host-show --host 0d19d114-55c8-4077-9cab-348579c70612\r\n---( HOST )---------------------------------------------------------------------\r\nUUID..............: 0d19d114-55c8-4077-9cab-348579c70612\r\nHostname..........: giskard.local\r\nAddress...........: ::ffff:92.108.228.195\r\n...\r\n---( STORAGE )------------------------------------------------------------------\r\nDEVICE                 SIZE FS         USED MOUNTPOINT \r\n/dev/disk2        147.08 GB hfs     94.00 % / \r\n/dev/disk0s2      465.44 GB hfs     91.00 % /Volumes/Giskard Data \r\n---( REMOTE USERS )-------------------------------------------------------------\r\nUSER      TTY           REMOTE IP         \r\npi        ttys003       172.16.1.10       \r\n--------------------------------------------------------------------------------\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}